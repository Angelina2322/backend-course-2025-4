// index.js

const { Command } = require('commander');
const http = require('http');
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ promises-–≤–µ—Ä—Å—ñ—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ readFile
const fs = require('fs/promises'); 
const path = require('path');
const url = require('url');
const { XMLBuilder } = require('fast-xml-parser');

const program = new Command();

// --- 1. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–ß–∞—Å—Ç–∏–Ω–∞ 1) ---
program
  .requiredOption('-i, --input <path>', '–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è')
  .requiredOption('-h, --host <address>', '–ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  .requiredOption('-p, --port <number>', '–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞', (value) => {
    const port = parseInt(value, 10);
    if (isNaN(port)) throw new Error('–ü–æ—Ä—Ç –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.');
    return port;
  });


// --- –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è XML ---
function processDataAndBuildXML(jsonData, query) {
    let records;
    try {
        // –ü—Ä–æ–≥—Ä–∞–º–∞ –º–∞—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å –ø–æ–ª—è
        records = JSON.parse(jsonData);
    } catch (e) {
        throw new Error("Invalid JSON file content.");
    }

    // --- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: ?min_rainfall=X ---
    const minRainfall = parseFloat(query.min_rainfall);
    if (!isNaN(minRainfall)) {
        records = records.filter(record => record.Rainfall > minRainfall);
    }

    // --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è XML ---
    const xmlData = { weather_data: { record: [] } };

    records.forEach(record => {
        const recordData = {
            // –í–∏—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è: Rainfall, Pressure3pm
            rainfall: record.Rainfall, 
            pressure3pm: record.Pressure3pm
        };
        
        // --- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: ?humidity=true ---
        if (query.humidity === 'true') {
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –≤–æ–ª–æ–≥—ñ—Å—Ç—å –≤–¥–µ–Ω—å (–ø–æ–ª–µ Humidity3pm)
            recordData.humidity = record.Humidity3pm;
        }

        xmlData.weather_data.record.push(recordData);
    });

    // --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è XML –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fast-xml-parser ---
    const builder = new XMLBuilder({
        ignoreAttributes: false,
        format: true // –î–ª—è –≥–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    });

    return builder.build(xmlData);
}


// --- 2. –õ–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
program.action(async (options) => {
    const { input, host, port } = options;
    const absolutePath = path.resolve(input);

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞) ---
    try {
        await fs.access(absolutePath, fs.constants.R_OK); 
    } catch (e) {
        console.error("Cannot find input file");
        process.exit(1); 
    }
    
    // --- 3. –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
    const server = http.createServer(async (req, res) => {
        const parsedUrl = url.parse(req.url, true); // true –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        
        if (req.method !== 'GET' || parsedUrl.pathname !== '/') {
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            return res.end('Not Found');
        }

        try {
            // --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ß–∏—Ç–∞–Ω–Ω—è JSON –∑ —Ñ–∞–π–ª—É ---
            const fileContent = await fs.readFile(absolutePath, 'utf8');
            
            // --- –û–±—Ä–æ–±–∫–∞ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è XML ---
            const xmlResponse = processDataAndBuildXML(fileContent, parsedUrl.query);
            
            // --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è XML —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ---
            res.writeHead(200, { 'Content-Type': 'application/xml; charset=utf-8' });
            res.end(xmlResponse);

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É:', error);
            res.writeHead(500, { 'Content-Type': 'text/plain' });
            res.end('Internal Server Error: ' + error.message);
        }
    });

    server.listen(port, host, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞: http://${host}:${port}`);
        console.log(`üíª –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: ${absolutePath}`);
    });

}).parse(process.argv);